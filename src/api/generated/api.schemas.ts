/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Indicador Online API
 * Documentação da API usando Swagger
 * OpenAPI spec version: 1.0
 */
export interface LoginDto {
  /** Endereço de e-mail do usuário */
  email: string;
  /**
   * Senha do usuário (mínimo 4 caracteres)
   * @minLength 4
   */
  password: string;
}

export interface UserAuth {
  /** ID do usuário */
  id: string;
  /** Nome do usuário */
  name: string;
  /** Email do funcionário */
  email: string;
  /** Função do usuário */
  role: string;
}

export interface ResponseAuthDto {
  /** Token de acesso */
  access_token: string;
  /** Token de atualização */
  refresh_token: string;
  /** Dados do usuário autenticado */
  user: UserAuth;
}

export interface UnauthorizedException { [key: string]: unknown }

export interface NotFoundException { [key: string]: unknown }

export interface TokenDto {
  /** Token de atualização */
  refreshToken: string;
}

export interface Company {
  /** ID da empresa */
  id: number;
  /** Nome da empresa */
  name: string;
  /** Email da empresa */
  email: string;
  /** CNPJ da empresa */
  cnpj: string;
  /** Se a empresa está ativa */
  isActive: boolean;
  /** Data de criação da empresa */
  created_at?: string;
  /** Última atualização da empresa */
  updated_at?: string;
  /** Id do Nível de acesso da empresa */
  role_id: string;
  /** Senha da empresa */
  password: string;
}

export interface CreateCompanyDto {
  /** Nome da empresa */
  name: string;
  /** CNPJ da empresa */
  cnpj: string;
  /** Se a empresa está ativa ou não */
  isActive: boolean;
  /** Email da empresa */
  email: string;
  /** ID do nível de acesso associada à empresa */
  roleId: string;
}

export interface ConflictException { [key: string]: unknown }

export interface UpdateCompanyDto {
  /** Nome da empresa */
  name: string;
  /** CNPJ da empresa */
  cnpj: string;
  /** Se a empresa está ativa ou não */
  isActive: boolean;
  /** IDs dos checklists associados à empresa */
  checklistIds: number[];
}

export interface CreateEmployeeDto {
  /** Nome do funcionário */
  name: string;
  /** Email do funcionário */
  email: string;
  /** Telefone do funcionário */
  phone: string;
  /** ID da empresa do funcionário */
  company_id: number;
  /** Id do nível do funcionário */
  roleId: string;
}

export interface CreateEmployeeResponse {
  /** Id do funcionário */
  id: number;
  /** Nome do funcionário */
  name: string;
  /** Email do funcionário */
  email: string;
  /** ID da empresa do funcionário */
  company_id: number;
  /** Telefone do funcionário */
  phone: string;
}

export interface EmployeeListDto {
  /** Id do funcionário */
  id: number;
  /** Nome do funcionário */
  name: string;
  /** Email do funcionário */
  email: string;
  /** Telefone do funcionário */
  phone: string;
  /** Nome da empresa */
  company_name: string;
  /** Nome do nível de acesso */
  role_name: string;
  /** ID da empresa do funcionário */
  company_id: number;
}

/**
 * É anomalia
 * @nullable
 */
export type CheckListMultipleChoiceDtoAnomalyStatus = typeof CheckListMultipleChoiceDtoAnomalyStatus[keyof typeof CheckListMultipleChoiceDtoAnomalyStatus] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckListMultipleChoiceDtoAnomalyStatus = {
  ANOMALIA: 'ANOMALIA',
  ANOMALIA_RESTRITIVA: 'ANOMALIA_RESTRITIVA',
} as const;

export interface CheckListMultipleChoiceDto {
  /** Escolha */
  choice: string;
  /**
   * É anomalia
   * @nullable
   */
  anomalyStatus: CheckListMultipleChoiceDtoAnomalyStatus;
}

/**
 * Tipo de resposta esperada para a pergunta
 */
export type CheckListQuestionsDtoAnswerType = typeof CheckListQuestionsDtoAnswerType[keyof typeof CheckListQuestionsDtoAnswerType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckListQuestionsDtoAnswerType = {
  Text: 'Text',
  Image: 'Image',
  IA: 'IA',
} as const;

/**
 * Tipo da pergunta
 */
export type CheckListQuestionsDtoType = typeof CheckListQuestionsDtoType[keyof typeof CheckListQuestionsDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckListQuestionsDtoType = {
  Texto: 'Texto',
  Múltipla_escolha: 'Múltipla escolha',
  Upload_de_arquivo: 'Upload de arquivo',
} as const;

export interface CheckListQuestionsDto {
  /** Pergunta */
  question: string;
  /** Tipo de resposta esperada para a pergunta */
  answerType: CheckListQuestionsDtoAnswerType;
  /** Tipo da pergunta */
  type: CheckListQuestionsDtoType;
  /** É obrigatória */
  isRequired: boolean;
  /** Prompt da IA */
  iaPrompt?: string;
  /** questions */
  multiple_choice?: CheckListMultipleChoiceDto[];
}

export interface CreateCheckListItemDto {
  /** categories_id */
  categoriesId: string;
  /** Lista de perguntas */
  question_list: CheckListQuestionsDto[];
}

export interface CreateCheckListDto {
  /** Nome do checklist */
  name: string;
  /** CheckListItem */
  checkListItem: CreateCheckListItemDto[];
}

export interface CheckList {
  /** ID do check List */
  id: string;
  /** Nome do checklist */
  name: string;
  /** Data de expiração */
  expiries_in: string;
  /** tempo de expiração das imagens das questões vinculadas ao checklist */
  images_expiries_in: string;
  /** Data de criação */
  created_at: string;
  /** Última atualização */
  updated_at: string;
}

export interface CheckListItemFormattedList {
  /** id */
  checklistItemId: string;
  /** categories_id */
  categories_id: string;
  /** checkList_id */
  checkList_id: string;
  /** created_at */
  created_at: string;
  /** updated_at */
  updated_at: string;
  /** company_id */
  company_id: number;
  /** Nome do checklist */
  checklistName: string;
  /** Nome da empresa vinculada ao checklist */
  companyName: string;
  /** ID da empresa vinculada ao checklist */
  companyId: string;
  /** Se o checklist tem anomalias */
  hasAnomalies: boolean;
}

export interface CheckListForSpecificEmployee {
  /** ID do checklist */
  checklistItemId: string;
  /** Nome do checklist */
  checklistName: string;
}

export interface UpdateCompanyRelated {
  /** ID da empresa */
  companyId: number;
  /** id */
  checkListItemId: string;
}

export interface CheckListItem {
  /** id */
  id: string;
  /** categories_id */
  categories_id: string;
  /** checkList_id */
  checkList_id: string;
  /** created_at */
  created_at: string;
  /** updated_at */
  updated_at: string;
  /** company_id */
  company_id: number;
}

export interface UpdateExpiriesTime {
  /** Data de expiração */
  expiriesTime: string;
  /** tempo de expiração das imagens das questões vinculadas ao checklist */
  imagesExpiriesTime: string;
  /** id */
  checkListId: string;
}

export interface Roles {
  /** Id do nível de acesso */
  id: string;
  /** Nome do nível de acesso */
  name: string;
  /** Data de criação */
  created_at: string;
  /** Data de atualização */
  updated_at: string;
}

export interface Categories {
  /** Id da categoria de acesso */
  id: string;
  /** Nome da categoria de acesso */
  name: string;
  /** Data de criação */
  created_at: string;
  /** Data de atualização */
  updated_at: string;
}

export interface CreateCategoriesDto {
  /** Nome da categoria de acesso */
  name: string;
}

export type ChoicesAnomalyStatus = typeof ChoicesAnomalyStatus[keyof typeof ChoicesAnomalyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChoicesAnomalyStatus = {
  ANOMALIA: 'ANOMALIA',
  ANOMALIA_RESTRITIVA: 'ANOMALIA_RESTRITIVA',
} as const;

export interface Choices {
  id: string;
  choice: string;
  anomalyStatus: ChoicesAnomalyStatus;
  created_at: string;
  question_id: string;
  updated_at: string;
}

/**
 * Tipo de resposta da questão
 */
export type QuestionsWithChoicesType = typeof QuestionsWithChoicesType[keyof typeof QuestionsWithChoicesType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuestionsWithChoicesType = {
  Upload_de_arquivo: 'Upload de arquivo',
  Múltipla_escolha: 'Múltipla escolha',
  Texto: 'Texto',
} as const;

export interface QuestionsWithChoices {
  /** ID da questão */
  id: string;
  /** Questão */
  question: string;
  /** Tipo de resposta da questão */
  type: QuestionsWithChoicesType;
  /** Se a questão é obrigatória */
  isRequired: boolean;
  /** ID do checklist */
  checkListItem_id: string;
  /**
   * Prompt da IA
   * @nullable
   */
  IAPrompt: string | null;
  /** Se multipla escolha as question choices */
  choices?: Choices[];
}

export type ChoicesDtoAnomaly = typeof ChoicesDtoAnomaly[keyof typeof ChoicesDtoAnomaly];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChoicesDtoAnomaly = {
  ANOMALIA: 'ANOMALIA',
  ANOMALIA_RESTRITIVA: 'ANOMALIA_RESTRITIVA',
} as const;

export interface ChoicesDto {
  choice: string;
  anomaly?: ChoicesDtoAnomaly;
}

export interface QuestionDto {
  /** question */
  question: string;
  /** type */
  type: string;
  /** employee_id */
  employee_id: number;
  /** isRequired */
  isRequired: boolean;
  /** checkListItem_id */
  checkListItem_id: string;
  /** IAPrompt */
  IAPrompt: string;
  /** answerType */
  answerType: string;
  /** Caso tenha múltipla escolha, as opções de resposta */
  choices?: ChoicesDto[];
}

export interface Question { [key: string]: unknown }

export interface UnprocessableEntityException { [key: string]: unknown }

export interface Answers {
  /** id */
  id: string;
  /** textAnswer */
  textAnswer?: string;
  /** imageAnswer */
  imageAnswer?: string;
  /** question_id */
  question_id: string;
  /** employee_id */
  employee_id: number;
  /** anomalyStatus */
  anomalyStatus: string;
}

export interface CreateAnswerDto {
  /** ID da pergunta */
  question_id: string;
  /** ID do funcionário */
  employee_id: string;
  /** Resposta da pergunta */
  textAnswer: string;
}

export type EmployeesControllerFindListParams = {
/**
 * Query de busca
 */
query?: string;
/**
 * Limite de registros por página
 */
limit: string;
/**
 * Página de registros
 */
page: string;
};

export type ChecklistsControllerFindPaginatedByParamsParams = {
/**
 * Data inicial
 */
startDate?: string;
/**
 * Data final
 */
endDate?: string;
/**
 * Buscar por empresa
 */
byCompany?: number;
/**
 * Limite de registros por página
 */
limit: string;
/**
 * Página de registros
 */
page: string;
};

export type ChecklistsControllerFindPaginatedByEmployeeParamsParams = {
/**
 * ID do funcionário
 */
employeeId: string;
};

export type QuestionsControllerFindListParams = {
checkListItemId: string;
/**
 * Limite de registros por página
 */
limit: string;
/**
 * Página de registros
 */
page: string;
};

export type AnswersControllerFindByQuestionIdParams = {
/**
 * Limite de registros por página
 */
limit: string;
/**
 * Página de registros
 */
page: string;
/**
 * question_id
 */
question_id: string;
};

