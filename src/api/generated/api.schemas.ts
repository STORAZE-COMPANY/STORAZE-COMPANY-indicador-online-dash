/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * Indicador Online API
 * Documentação da API usando Swagger
 * OpenAPI spec version: 1.0
 */
export interface LoginDto {
  /** Endereço de e-mail do usuário */
  email: string;
  /**
   * Senha do usuário (mínimo 4 caracteres)
   * @minLength 4
   */
  password: string;
}

export interface UserAuth {
  /** ID do usuário */
  id: string;
  /** Nome do usuário */
  name: string;
  /** Email do funcionário */
  email: string;
  /** Função do usuário */
  role: string;
}

export interface ResponseAuthDto {
  /** Token de acesso */
  access_token: string;
  /** Token de atualização */
  refresh_token: string;
  /** Dados do usuário autenticado */
  user: UserAuth;
}

export interface UnauthorizedException { [key: string]: unknown }

export interface NotFoundException { [key: string]: unknown }

export interface TokenDto {
  /** Token de atualização */
  refreshToken: string;
}

export interface User {
  /** Nome do usuário */
  id: string;
  /** Email do usuário */
  email: string;
  /** Senha do usuário */
  password: string;
  /** Nome do usuário (opcional) */
  name: string;
  /** Papel do usuário (opcional) */
  role: string;
  /** Data de criação do usuário (opcional) */
  created_at: string;
  /** Data de atualização do usuário (opcional) */
  updated_at: string;
}

export interface ConflictException { [key: string]: unknown }

export interface Company {
  /** ID da empresa */
  id: number;
  /** Nome da empresa */
  name: string;
  /** Email da empresa */
  email: string;
  /** CNPJ da empresa */
  cnpj: string;
  /** Se a empresa está ativa */
  isActive: boolean;
  /** IDs dos checklists associados à empresa */
  checklistIds: number[];
  /** Data de criação da empresa */
  created_at?: string;
  /** Última atualização da empresa */
  updated_at?: string;
  /** Id do Nível de acesso da empresa */
  role_id: string;
  /** Senha da empresa */
  password: string;
}

export interface CreateCompanyDto {
  /** Nome da empresa */
  name: string;
  /** CNPJ da empresa */
  cnpj: string;
  /** Se a empresa está ativa ou não */
  isActive: boolean;
  /** Email da empresa */
  email: string;
  /** IDs dos checklists associados à empresa */
  checklistIds: number[];
  /** ID do nível de acesso associada à empresa */
  roleId: string;
}

export interface UpdateCompanyDto {
  /** Nome da empresa */
  name: string;
  /** CNPJ da empresa */
  cnpj: string;
  /** Se a empresa está ativa ou não */
  isActive: boolean;
  /** IDs dos checklists associados à empresa */
  checklistIds: number[];
}

export interface CreateEmployeeDto {
  /** Nome do funcionário */
  name: string;
  /** Email do funcionário */
  email: string;
  /** Telefone do funcionário */
  phone: string;
  /** ID da empresa do funcionário */
  company_id: number;
  /** Id do nível do funcionário */
  roleId: string;
}

export interface CreateEmployeeResponse {
  /** Id do funcionário */
  id: number;
  /** Nome do funcionário */
  name: string;
  /** Email do funcionário */
  email: string;
  /** ID da empresa do funcionário */
  company_id: number;
  /** Telefone do funcionário */
  phone: string;
}

export interface Employee {
  /** Id do funcionário */
  id: number;
  /** Nome do funcionário */
  name: string;
  /** Email do funcionário */
  email: string;
  /** Telefone do funcionário */
  phone: string;
  /** ID da empresa do funcionário */
  company_id: number;
  /** Senha do funcionário */
  password: string;
  /** Id do nível do funcionário */
  role_id: string;
}

/**
 * É anomalia
 * @nullable
 */
export type CheckListMultipleChoiceDtoAnomaly = typeof CheckListMultipleChoiceDtoAnomaly[keyof typeof CheckListMultipleChoiceDtoAnomaly] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckListMultipleChoiceDtoAnomaly = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
} as const;

export interface CheckListMultipleChoiceDto {
  /** Escolha */
  choice: string;
  /**
   * É anomalia
   * @nullable
   */
  anomaly: CheckListMultipleChoiceDtoAnomaly;
}

/**
 * Tipo de resposta esperada para a pergunta
 */
export type CheckListQuestionsDtoAnswerType = typeof CheckListQuestionsDtoAnswerType[keyof typeof CheckListQuestionsDtoAnswerType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckListQuestionsDtoAnswerType = {
  Text: 'Text',
  Image: 'Image',
  IA: 'IA',
} as const;

/**
 * Tipo da pergunta
 */
export type CheckListQuestionsDtoType = typeof CheckListQuestionsDtoType[keyof typeof CheckListQuestionsDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckListQuestionsDtoType = {
  Texto: 'Texto',
  Múltipla_escolha: 'Múltipla escolha',
  Upload_de_arquivo: 'Upload de arquivo',
} as const;

export interface CheckListQuestionsDto {
  /** Pergunta */
  question: string;
  /** Tipo de resposta esperada para a pergunta */
  answerType: CheckListQuestionsDtoAnswerType;
  /** Tipo da pergunta */
  type: CheckListQuestionsDtoType;
  /** É obrigatória */
  isRequired: boolean;
  /** Prompt da IA */
  iaPrompt?: string;
  /** questions */
  multiple_choice?: CheckListMultipleChoiceDto[];
}

export interface CreateCheckListItemDto {
  /** categories_id */
  categoriesId: string;
  /** Lista de perguntas */
  question_list: CheckListQuestionsDto[];
}

export interface CreateCheckListDto {
  /** Nome do checklist */
  name: string;
  /** Data de expiração */
  expiries_in: string;
  /** CheckListItem */
  checkListItem: CreateCheckListItemDto[];
}

export interface CheckList {
  /** ID do check List */
  id: string;
  /** Nome do checklist */
  name: string;
  /** Data de expiração */
  expiries_in: string;
  /** Data de criação */
  created_at: string;
  /** Última atualização */
  updated_at: string;
}

/**
 * Tipo da pergunta
 */
export type QuestionQuestionType = typeof QuestionQuestionType[keyof typeof QuestionQuestionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuestionQuestionType = {
  'multiple-choice': 'multiple-choice',
  text: 'text',
  boolean: 'boolean',
} as const;

export interface Question {
  /** Texto da pergunta */
  questionText: string;
  /** Tipo da pergunta */
  questionType: QuestionQuestionType;
  /** Opções disponíveis para a pergunta */
  options?: string[];
  /** Define se a pergunta é obrigatória */
  isRequired: boolean;
  /** Posição da pergunta na categoria */
  position: number;
}

export interface Category {
  /** Nome da categoria */
  categoryName: string;
  /** Lista de perguntas dentro da categoria */
  questions: Question[];
}

export interface Checklist {
  /** ID único do checklist */
  id: number;
  /** Nome do checklist */
  name: string;
  /** Lista de categorias dentro do checklist */
  categories: Category[];
  /** Data de criação */
  created_at?: string;
  /** Última atualização */
  updated_at?: string;
}

/**
 * Tipo da pergunta
 */
export type QuestionDtoQuestionType = typeof QuestionDtoQuestionType[keyof typeof QuestionDtoQuestionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuestionDtoQuestionType = {
  Upload_de_arquivo: 'Upload de arquivo',
  Múltipla_escolha: 'Múltipla escolha',
  Texto: 'Texto',
} as const;

export interface QuestionDto {
  /** Texto da pergunta */
  questionText: string;
  /** Tipo da pergunta */
  questionType: QuestionDtoQuestionType;
  /** Opções da pergunta */
  options: string[];
  /** Indica se a pergunta é obrigatória */
  isRequired: boolean;
  /** Posição da pergunta */
  position: number;
}

export interface CategoryDto {
  /** Nome da categoria */
  categoryName: string;
  /** Lista de perguntas dentro da categoria */
  questions: QuestionDto[];
}

export interface UpdateChecklistDto {
  /** Nome do checklist */
  name: string;
  /** Lista de categorias do checklist */
  categories: CategoryDto[];
}

export interface Roles {
  /** Id do nível de acesso */
  id: string;
  /** Nome do nível de acesso */
  name: string;
  /** Data de criação */
  created_at: string;
  /** Data de atualização */
  updated_at: string;
}

export interface Categories {
  /** Id da categoria de acesso */
  id: string;
  /** Nome da categoria de acesso */
  name: string;
  /** Data de criação */
  created_at: string;
  /** Data de atualização */
  updated_at: string;
}

export interface CreateCategoriesDto {
  /** Nome da categoria de acesso */
  name: string;
}

export type EmployeesControllerFindListParams = {
/**
 * Query de busca
 */
query?: string;
/**
 * Limite de registros por página
 */
limit: string;
/**
 * Página de registros
 */
page: string;
};

