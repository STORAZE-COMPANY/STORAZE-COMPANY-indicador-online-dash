/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Indicador Online API
 * Documenta√ß√£o da API usando Swagger
 * OpenAPI spec version: 1.0
 */
import type {
  Categories,
  CheckList,
  Checklist,
  Company,
  CreateCategoriesDto,
  CreateCheckListDto,
  CreateCompanyDto,
  CreateEmployeeDto,
  CreateEmployeeResponse,
  Employee,
  EmployeesControllerFindListParams,
  LoginDto,
  ResponseAuthDto,
  Roles,
  TokenDto,
  UpdateChecklistDto,
  UpdateCompanyDto,
  User,
  UserAuth
} from './api.schemas';

import { customInstance } from '../axios';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  export const getIndicadorOnlineAPI = () => {
const appControllerGetHello = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `http://localhost:3000/`, method: 'GET'
    },
      options);
    }
  
const authControllerLoginDashboard = (
    loginDto: LoginDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ResponseAuthDto>(
      {url: `http://localhost:3000/auth/loginDashboard`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginDto
    },
      options);
    }
  
const authControllerLoginMobile = (
    loginDto: LoginDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ResponseAuthDto>(
      {url: `http://localhost:3000/auth/loginMobile`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginDto
    },
      options);
    }
  
const authControllerRefreshToken = (
    tokenDto: TokenDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ResponseAuthDto>(
      {url: `http://localhost:3000/auth/refreshToken`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tokenDto
    },
      options);
    }
  
const authControllerGetUserAuth = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserAuth>(
      {url: `http://localhost:3000/auth/userAuth`, method: 'GET'
    },
      options);
    }
  
const usersControllerCreate = (
    user: User,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<User>(
      {url: `http://localhost:3000/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: user
    },
      options);
    }
  
const usersControllerGetAllUsers = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<User[]>(
      {url: `http://localhost:3000/users`, method: 'GET'
    },
      options);
    }
  
const usersControllerGetByEmail = (
    email: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<User>(
      {url: `http://localhost:3000/users/${email}`, method: 'GET'
    },
      options);
    }
  
const companiesControllerFindAll = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Company[]>(
      {url: `http://localhost:3000/companies`, method: 'GET'
    },
      options);
    }
  
const companiesControllerCreate = (
    createCompanyDto: CreateCompanyDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Company>(
      {url: `http://localhost:3000/companies`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCompanyDto
    },
      options);
    }
  
const companiesControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Company>(
      {url: `http://localhost:3000/companies/${id}`, method: 'GET'
    },
      options);
    }
  
const companiesControllerUpdate = (
    id: number,
    updateCompanyDto: UpdateCompanyDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Company>(
      {url: `http://localhost:3000/companies/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCompanyDto
    },
      options);
    }
  
const companiesControllerRemove = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `http://localhost:3000/companies/${id}`, method: 'DELETE'
    },
      options);
    }
  
const employeesControllerCreate = (
    createEmployeeDto: CreateEmployeeDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateEmployeeResponse>(
      {url: `http://localhost:3000/employees`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createEmployeeDto
    },
      options);
    }
  
const employeesControllerFindList = (
    params: EmployeesControllerFindListParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Employee>(
      {url: `http://localhost:3000/employees`, method: 'GET',
        params
    },
      options);
    }
  
const checklistsControllerCreate = (
    createCheckListDto: CreateCheckListDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CheckList>(
      {url: `http://localhost:3000/checklists`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCheckListDto
    },
      options);
    }
  
const checklistsControllerFindAll = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Checklist[]>(
      {url: `http://localhost:3000/checklists`, method: 'GET'
    },
      options);
    }
  
const checklistsControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Checklist[]>(
      {url: `http://localhost:3000/checklists/${id}`, method: 'GET'
    },
      options);
    }
  
const checklistsControllerUpdate = (
    id: number,
    updateChecklistDto: UpdateChecklistDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Checklist>(
      {url: `http://localhost:3000/checklists/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateChecklistDto
    },
      options);
    }
  
const checklistsControllerRemove = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `http://localhost:3000/checklists/${id}`, method: 'DELETE'
    },
      options);
    }
  
const rolesControllerFindList = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Roles[]>(
      {url: `http://localhost:3000/roles`, method: 'GET'
    },
      options);
    }
  
const categoriesControllerFindList = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Categories[]>(
      {url: `http://localhost:3000/categories`, method: 'GET'
    },
      options);
    }
  
const categoriesControllerCreate = (
    createCategoriesDto: CreateCategoriesDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Categories>(
      {url: `http://localhost:3000/categories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCategoriesDto
    },
      options);
    }
  
return {appControllerGetHello,authControllerLoginDashboard,authControllerLoginMobile,authControllerRefreshToken,authControllerGetUserAuth,usersControllerCreate,usersControllerGetAllUsers,usersControllerGetByEmail,companiesControllerFindAll,companiesControllerCreate,companiesControllerFindOne,companiesControllerUpdate,companiesControllerRemove,employeesControllerCreate,employeesControllerFindList,checklistsControllerCreate,checklistsControllerFindAll,checklistsControllerFindOne,checklistsControllerUpdate,checklistsControllerRemove,rolesControllerFindList,categoriesControllerFindList,categoriesControllerCreate}};

type AwaitedInput<T> = PromiseLike<T> | T;

    type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type AppControllerGetHelloResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['appControllerGetHello']>>>
export type AuthControllerLoginDashboardResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['authControllerLoginDashboard']>>>
export type AuthControllerLoginMobileResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['authControllerLoginMobile']>>>
export type AuthControllerRefreshTokenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['authControllerRefreshToken']>>>
export type AuthControllerGetUserAuthResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['authControllerGetUserAuth']>>>
export type UsersControllerCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['usersControllerCreate']>>>
export type UsersControllerGetAllUsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['usersControllerGetAllUsers']>>>
export type UsersControllerGetByEmailResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['usersControllerGetByEmail']>>>
export type CompaniesControllerFindAllResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['companiesControllerFindAll']>>>
export type CompaniesControllerCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['companiesControllerCreate']>>>
export type CompaniesControllerFindOneResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['companiesControllerFindOne']>>>
export type CompaniesControllerUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['companiesControllerUpdate']>>>
export type CompaniesControllerRemoveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['companiesControllerRemove']>>>
export type EmployeesControllerCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['employeesControllerCreate']>>>
export type EmployeesControllerFindListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['employeesControllerFindList']>>>
export type ChecklistsControllerCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['checklistsControllerCreate']>>>
export type ChecklistsControllerFindAllResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['checklistsControllerFindAll']>>>
export type ChecklistsControllerFindOneResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['checklistsControllerFindOne']>>>
export type ChecklistsControllerUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['checklistsControllerUpdate']>>>
export type ChecklistsControllerRemoveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['checklistsControllerRemove']>>>
export type RolesControllerFindListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['rolesControllerFindList']>>>
export type CategoriesControllerFindListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['categoriesControllerFindList']>>>
export type CategoriesControllerCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['categoriesControllerCreate']>>>
