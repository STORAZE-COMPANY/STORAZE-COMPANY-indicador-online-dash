/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * Indicador Online API
 * Documentação da API usando Swagger
 * OpenAPI spec version: 1.0
 */
import type {
  AnswerChoice,
  AnswerResponse,
  AnswerWithCheckList,
  Answers,
  AnswersControllerCreateForImageQuestionBody,
  AnswersControllerFindByQuestionIdParams,
  Categories,
  CheckList,
  CheckListForSpecificEmployee,
  CheckListItem,
  CheckListItemFormattedList,
  ChecklistsControllerFindPaginatedByEmployeeParamsParams,
  ChecklistsControllerFindPaginatedByParamsParams,
  Company,
  CreateAnswerChoice,
  CreateAnswerDto,
  CreateCategoriesDto,
  CreateCheckListDto,
  CreateCompanyDto,
  CreateEmployeeDto,
  CreateEmployeeResponse,
  EmployeeListDto,
  EmployeesControllerFindListParams,
  LoginDto,
  Question,
  QuestionDto,
  QuestionsControllerFindListParams,
  QuestionsWithChoices,
  ResponseAuthDto,
  Roles,
  TokenDto,
  UpdateCompanyDto,
  UpdateCompanyRelated,
  UpdateExpiriesTime,
  UploadFileDto,
  UploadImageResponseDto,
  UserAuth
} from './api.schemas';

import { customInstance } from '../axios';



  export const getIndicadorOnlineAPI = () => {
const appControllerGetHello = (
    
 ) => {
      return customInstance<void>(
      {url: `http://localhost:3000/`, method: 'GET'
    },
      );
    }
  
const authControllerLoginDashboard = (
    loginDto: LoginDto,
 ) => {
      return customInstance<ResponseAuthDto>(
      {url: `http://localhost:3000/auth/loginDashboard`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginDto
    },
      );
    }
  
const authControllerLoginMobile = (
    loginDto: LoginDto,
 ) => {
      return customInstance<ResponseAuthDto>(
      {url: `http://localhost:3000/auth/loginMobile`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginDto
    },
      );
    }
  
const authControllerRefreshToken = (
    tokenDto: TokenDto,
 ) => {
      return customInstance<ResponseAuthDto>(
      {url: `http://localhost:3000/auth/refreshToken`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tokenDto
    },
      );
    }
  
const authControllerGetUserAuth = (
    
 ) => {
      return customInstance<UserAuth>(
      {url: `http://localhost:3000/auth/userAuth`, method: 'GET'
    },
      );
    }
  
const companiesControllerFindAll = (
    
 ) => {
      return customInstance<Company[]>(
      {url: `http://localhost:3000/companies`, method: 'GET'
    },
      );
    }
  
const companiesControllerCreate = (
    createCompanyDto: CreateCompanyDto,
 ) => {
      return customInstance<Company>(
      {url: `http://localhost:3000/companies`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCompanyDto
    },
      );
    }
  
const companiesControllerFindOne = (
    id: number,
 ) => {
      return customInstance<Company>(
      {url: `http://localhost:3000/companies/${id}`, method: 'GET'
    },
      );
    }
  
const companiesControllerUpdate = (
    id: number,
    updateCompanyDto: UpdateCompanyDto,
 ) => {
      return customInstance<Company>(
      {url: `http://localhost:3000/companies/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCompanyDto
    },
      );
    }
  
const companiesControllerRemove = (
    id: number,
 ) => {
      return customInstance<void>(
      {url: `http://localhost:3000/companies/${id}`, method: 'DELETE'
    },
      );
    }
  
const employeesControllerCreate = (
    createEmployeeDto: CreateEmployeeDto,
 ) => {
      return customInstance<CreateEmployeeResponse>(
      {url: `http://localhost:3000/employees`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createEmployeeDto
    },
      );
    }
  
const employeesControllerFindList = (
    params: EmployeesControllerFindListParams,
 ) => {
      return customInstance<EmployeeListDto[]>(
      {url: `http://localhost:3000/employees`, method: 'GET',
        params
    },
      );
    }
  
const checklistsControllerCreate = (
    createCheckListDto: CreateCheckListDto,
 ) => {
      return customInstance<CheckList>(
      {url: `http://localhost:3000/checklists`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCheckListDto
    },
      );
    }
  
const checklistsControllerFindPaginatedByParams = (
    params: ChecklistsControllerFindPaginatedByParamsParams,
 ) => {
      return customInstance<CheckListItemFormattedList[]>(
      {url: `http://localhost:3000/checklists`, method: 'GET',
        params
    },
      );
    }
  
const checklistsControllerFindPaginatedByEmployeeParams = (
    params: ChecklistsControllerFindPaginatedByEmployeeParamsParams,
 ) => {
      return customInstance<CheckListForSpecificEmployee[]>(
      {url: `http://localhost:3000/checklists/by-employee`, method: 'GET',
        params
    },
      );
    }
  
const checklistsControllerUpdateCompanyId = (
    updateCompanyRelated: UpdateCompanyRelated,
 ) => {
      return customInstance<CheckListItem>(
      {url: `http://localhost:3000/checklists/update-company-related`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCompanyRelated
    },
      );
    }
  
const checklistsControllerUpdateExpiriesTime = (
    updateExpiriesTime: UpdateExpiriesTime,
 ) => {
      return customInstance<CheckList>(
      {url: `http://localhost:3000/checklists/update-expiries-time`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateExpiriesTime
    },
      );
    }
  
const rolesControllerFindList = (
    
 ) => {
      return customInstance<Roles[]>(
      {url: `http://localhost:3000/roles`, method: 'GET'
    },
      );
    }
  
const categoriesControllerFindList = (
    
 ) => {
      return customInstance<Categories[]>(
      {url: `http://localhost:3000/categories`, method: 'GET'
    },
      );
    }
  
const categoriesControllerCreate = (
    createCategoriesDto: CreateCategoriesDto,
 ) => {
      return customInstance<Categories>(
      {url: `http://localhost:3000/categories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCategoriesDto
    },
      );
    }
  
const questionsControllerFindList = (
    params: QuestionsControllerFindListParams,
 ) => {
      return customInstance<QuestionsWithChoices>(
      {url: `http://localhost:3000/questions`, method: 'GET',
        params
    },
      );
    }
  
const questionsControllerCreateQuestion = (
    questionDto: QuestionDto,
 ) => {
      return customInstance<Question>(
      {url: `http://localhost:3000/questions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: questionDto
    },
      );
    }
  
const questionsControllerFindAll = (
    
 ) => {
      return customInstance<QuestionsWithChoices>(
      {url: `http://localhost:3000/questions/findAll`, method: 'GET'
    },
      );
    }
  
const answersControllerFindList = (
    
 ) => {
      return customInstance<Answers[]>(
      {url: `http://localhost:3000/answers`, method: 'GET'
    },
      );
    }
  
const answersControllerCreate = (
    createAnswerDto: CreateAnswerDto,
 ) => {
      return customInstance<AnswerResponse>(
      {url: `http://localhost:3000/answers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createAnswerDto
    },
      );
    }
  
const answersControllerFindByQuestionId = (
    params: AnswersControllerFindByQuestionIdParams,
 ) => {
      return customInstance<Answers[]>(
      {url: `http://localhost:3000/answers/answers-question`, method: 'GET',
        params
    },
      );
    }
  
const answersControllerCreateForImageQuestion = (
    answersControllerCreateForImageQuestionBody: AnswersControllerCreateForImageQuestionBody,
 ) => {const formData = new FormData();
if(answersControllerCreateForImageQuestionBody.image !== undefined) {
 formData.append('image', answersControllerCreateForImageQuestionBody.image)
 }
if(answersControllerCreateForImageQuestionBody.question_id !== undefined) {
 formData.append('question_id', answersControllerCreateForImageQuestionBody.question_id)
 }
if(answersControllerCreateForImageQuestionBody.employee_id !== undefined) {
 formData.append('employee_id', answersControllerCreateForImageQuestionBody.employee_id)
 }

      return customInstance<AnswerResponse>(
      {url: `http://localhost:3000/answers/answers-image-question`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      );
    }
  
const answersControllerCreateForMultipleQuestion = (
    createAnswerChoice: CreateAnswerChoice,
 ) => {
      return customInstance<AnswerChoice>(
      {url: `http://localhost:3000/answers/answers-multiple-choice-question`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createAnswerChoice
    },
      );
    }
  
const answersControllerFindAnswersWithCheckList = (
    
 ) => {
      return customInstance<AnswerWithCheckList[]>(
      {url: `http://localhost:3000/answers/answers-checklist`, method: 'GET'
    },
      );
    }
  
const imagesControllerUploadFile = (
    uploadFileDto: UploadFileDto,
 ) => {const formData = new FormData();
formData.append('file', uploadFileDto.file)

      return customInstance<UploadImageResponseDto>(
      {url: `http://localhost:3000/images`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      );
    }
  
return {appControllerGetHello,authControllerLoginDashboard,authControllerLoginMobile,authControllerRefreshToken,authControllerGetUserAuth,companiesControllerFindAll,companiesControllerCreate,companiesControllerFindOne,companiesControllerUpdate,companiesControllerRemove,employeesControllerCreate,employeesControllerFindList,checklistsControllerCreate,checklistsControllerFindPaginatedByParams,checklistsControllerFindPaginatedByEmployeeParams,checklistsControllerUpdateCompanyId,checklistsControllerUpdateExpiriesTime,rolesControllerFindList,categoriesControllerFindList,categoriesControllerCreate,questionsControllerFindList,questionsControllerCreateQuestion,questionsControllerFindAll,answersControllerFindList,answersControllerCreate,answersControllerFindByQuestionId,answersControllerCreateForImageQuestion,answersControllerCreateForMultipleQuestion,answersControllerFindAnswersWithCheckList,imagesControllerUploadFile}};

type AwaitedInput<T> = PromiseLike<T> | T;

    type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type AppControllerGetHelloResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['appControllerGetHello']>>>
export type AuthControllerLoginDashboardResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['authControllerLoginDashboard']>>>
export type AuthControllerLoginMobileResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['authControllerLoginMobile']>>>
export type AuthControllerRefreshTokenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['authControllerRefreshToken']>>>
export type AuthControllerGetUserAuthResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['authControllerGetUserAuth']>>>
export type CompaniesControllerFindAllResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['companiesControllerFindAll']>>>
export type CompaniesControllerCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['companiesControllerCreate']>>>
export type CompaniesControllerFindOneResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['companiesControllerFindOne']>>>
export type CompaniesControllerUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['companiesControllerUpdate']>>>
export type CompaniesControllerRemoveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['companiesControllerRemove']>>>
export type EmployeesControllerCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['employeesControllerCreate']>>>
export type EmployeesControllerFindListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['employeesControllerFindList']>>>
export type ChecklistsControllerCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['checklistsControllerCreate']>>>
export type ChecklistsControllerFindPaginatedByParamsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['checklistsControllerFindPaginatedByParams']>>>
export type ChecklistsControllerFindPaginatedByEmployeeParamsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['checklistsControllerFindPaginatedByEmployeeParams']>>>
export type ChecklistsControllerUpdateCompanyIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['checklistsControllerUpdateCompanyId']>>>
export type ChecklistsControllerUpdateExpiriesTimeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['checklistsControllerUpdateExpiriesTime']>>>
export type RolesControllerFindListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['rolesControllerFindList']>>>
export type CategoriesControllerFindListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['categoriesControllerFindList']>>>
export type CategoriesControllerCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['categoriesControllerCreate']>>>
export type QuestionsControllerFindListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['questionsControllerFindList']>>>
export type QuestionsControllerCreateQuestionResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['questionsControllerCreateQuestion']>>>
export type QuestionsControllerFindAllResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['questionsControllerFindAll']>>>
export type AnswersControllerFindListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['answersControllerFindList']>>>
export type AnswersControllerCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['answersControllerCreate']>>>
export type AnswersControllerFindByQuestionIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['answersControllerFindByQuestionId']>>>
export type AnswersControllerCreateForImageQuestionResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['answersControllerCreateForImageQuestion']>>>
export type AnswersControllerCreateForMultipleQuestionResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['answersControllerCreateForMultipleQuestion']>>>
export type AnswersControllerFindAnswersWithCheckListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['answersControllerFindAnswersWithCheckList']>>>
export type ImagesControllerUploadFileResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getIndicadorOnlineAPI>['imagesControllerUploadFile']>>>
