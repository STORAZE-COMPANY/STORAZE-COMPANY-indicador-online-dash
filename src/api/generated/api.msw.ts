/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Indicador Online API
 * Documenta√ß√£o da API usando Swagger
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  AnomalyResolution,
  AnswerChoice,
  AnswerResponse,
  Answers,
  AnswersWithQuestions,
  Categories,
  CheckList,
  CheckListForSpecificEmployee,
  CheckListItem,
  CheckListItemFormattedList,
  Company,
  CompanyResponse,
  CreateEmployeeResponse,
  Employee,
  EmployeeListDto,
  FindCompanySettings,
  Question,
  QuestionsWithChoices,
  ResponseAuthDto,
  Roles,
  UserAuth
} from './api.schemas';


export const getAuthControllerLoginDashboardResponseMock = (overrideResponse: Partial< ResponseAuthDto > = {}): ResponseAuthDto => ({access_token: faker.string.alpha(20), refresh_token: faker.string.alpha(20), user: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.string.alpha(20)},}, ...overrideResponse})

export const getAuthControllerLoginMobileResponseMock = (overrideResponse: Partial< ResponseAuthDto > = {}): ResponseAuthDto => ({access_token: faker.string.alpha(20), refresh_token: faker.string.alpha(20), user: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.string.alpha(20)},}, ...overrideResponse})

export const getAuthControllerRefreshTokenResponseMock = (overrideResponse: Partial< ResponseAuthDto > = {}): ResponseAuthDto => ({access_token: faker.string.alpha(20), refresh_token: faker.string.alpha(20), user: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.string.alpha(20)},}, ...overrideResponse})

export const getAuthControllerGetUserAuthResponseMock = (overrideResponse: Partial< UserAuth > = {}): UserAuth => ({id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.string.alpha(20), ...overrideResponse})

export const getCompaniesControllerFindSettingsResponseMock = (): FindCompanySettings[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), answersExpirationTime: faker.number.int({min: undefined, max: undefined}), company_id: faker.number.int({min: undefined, max: undefined}), created_at: faker.string.alpha(20), updated_at: faker.string.alpha(20), companyName: faker.string.alpha(20)})))

export const getCompaniesControllerUpdateCompanySettingsResponseMock = (overrideResponse: Partial< CompanyResponse > = {}): CompanyResponse => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), email: faker.string.alpha(20), cnpj: faker.string.alpha(20), isActive: faker.datatype.boolean(), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), role_id: faker.string.alpha(20), ...overrideResponse})

export const getCompaniesControllerFindAllResponseMock = (): Company[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), email: faker.string.alpha(20), cnpj: faker.string.alpha(20), isActive: faker.datatype.boolean(), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), role_id: faker.string.alpha(20), password: faker.string.alpha(20)})))

export const getCompaniesControllerCreateResponseMock = (overrideResponse: Partial< CompanyResponse > = {}): CompanyResponse => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), email: faker.string.alpha(20), cnpj: faker.string.alpha(20), isActive: faker.datatype.boolean(), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), role_id: faker.string.alpha(20), ...overrideResponse})

export const getCompaniesControllerUpdateResponseMock = (overrideResponse: Partial< CompanyResponse > = {}): CompanyResponse => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), email: faker.string.alpha(20), cnpj: faker.string.alpha(20), isActive: faker.datatype.boolean(), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), role_id: faker.string.alpha(20), ...overrideResponse})

export const getCompaniesControllerFindOneResponseMock = (overrideResponse: Partial< Company > = {}): Company => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), email: faker.string.alpha(20), cnpj: faker.string.alpha(20), isActive: faker.datatype.boolean(), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), role_id: faker.string.alpha(20), password: faker.string.alpha(20), ...overrideResponse})

export const getEmployeesControllerCreateResponseMock = (overrideResponse: Partial< CreateEmployeeResponse > = {}): CreateEmployeeResponse => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), email: faker.string.alpha(20), company_id: faker.number.int({min: undefined, max: undefined}), phone: faker.string.alpha(20), ...overrideResponse})

export const getEmployeesControllerFindListResponseMock = (): EmployeeListDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), email: faker.string.alpha(20), phone: faker.string.alpha(20), company_name: faker.string.alpha(20), role_name: faker.string.alpha(20), company_id: faker.number.int({min: undefined, max: undefined})})))

export const getEmployeesControllerUpdateResponseMock = (overrideResponse: Partial< Employee > = {}): Employee => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), email: faker.string.alpha(20), phone: faker.string.alpha(20), company_id: faker.number.int({min: undefined, max: undefined}), password: faker.string.alpha(20), role_id: faker.string.alpha(20), questionId: faker.string.alpha(20), isActive: faker.datatype.boolean(), ...overrideResponse})

export const getChecklistsControllerCreateResponseMock = (overrideResponse: Partial< CheckList > = {}): CheckList => ({id: faker.string.alpha(20), name: faker.string.alpha(20), expiries_in: `${faker.date.past().toISOString().split('.')[0]}Z`, images_expiries_in: `${faker.date.past().toISOString().split('.')[0]}Z`, created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getChecklistsControllerFindPaginatedByParamsResponseMock = (): CheckListItemFormattedList[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({checklistItemId: faker.string.alpha(20), categories_id: faker.string.alpha(20), checkList_id: faker.string.alpha(20), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, company_id: faker.number.int({min: undefined, max: undefined}), checklistName: faker.string.alpha(20), companyName: faker.string.alpha(20), companyId: faker.string.alpha(20), hasAnomalies: faker.datatype.boolean()})))

export const getChecklistsControllerFindPaginatedByEmployeeParamsResponseMock = (): CheckListForSpecificEmployee[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({checklistId: faker.string.alpha(20), checklistName: faker.string.alpha(20)})))

export const getChecklistsControllerUpdateCompanyIdResponseMock = (overrideResponse: Partial< CheckListItem > = {}): CheckListItem => ({id: faker.string.alpha(20), categories_id: faker.string.alpha(20), checkList_id: faker.string.alpha(20), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, company_id: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getChecklistsControllerUpdateExpiriesTimeResponseMock = (overrideResponse: Partial< CheckList > = {}): CheckList => ({id: faker.string.alpha(20), name: faker.string.alpha(20), expiries_in: `${faker.date.past().toISOString().split('.')[0]}Z`, images_expiries_in: `${faker.date.past().toISOString().split('.')[0]}Z`, created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getRolesControllerFindListResponseMock = (): Roles[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), name: faker.string.alpha(20), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getCategoriesControllerFindListResponseMock = (): Categories[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), name: faker.string.alpha(20), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getCategoriesControllerCreateResponseMock = (overrideResponse: Partial< Categories > = {}): Categories => ({id: faker.string.alpha(20), name: faker.string.alpha(20), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getQuestionsControllerFindListResponseMock = (overrideResponse: Partial< QuestionsWithChoices > = {}): QuestionsWithChoices => ({id: faker.string.alpha(20), question: faker.string.alpha(20), type: faker.helpers.arrayElement(['Upload de arquivo','M√∫ltipla escolha','Texto'] as const), isRequired: faker.datatype.boolean(), checkListItem_id: faker.string.alpha(20), IAPrompt: faker.helpers.arrayElement([faker.string.alpha(20), null]), choices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), choice: faker.string.alpha(20), anomalyStatus: faker.helpers.arrayElement(['ANOMALIA','ANOMALIA_RESTRITIVA'] as const), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, question_id: faker.string.alpha(20), updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`})), undefined]), ...overrideResponse})

export const getQuestionsControllerCreateQuestionResponseMock = (overrideResponse: Partial< Question > = {}): Question => ({...overrideResponse})

export const getQuestionsControllerUpdateQuestionResponseMock = (overrideResponse: Partial< Question > = {}): Question => ({...overrideResponse})

export const getQuestionsControllerFindAllResponseMock = (overrideResponse: Partial< QuestionsWithChoices > = {}): QuestionsWithChoices => ({id: faker.string.alpha(20), question: faker.string.alpha(20), type: faker.helpers.arrayElement(['Upload de arquivo','M√∫ltipla escolha','Texto'] as const), isRequired: faker.datatype.boolean(), checkListItem_id: faker.string.alpha(20), IAPrompt: faker.helpers.arrayElement([faker.string.alpha(20), null]), choices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), choice: faker.string.alpha(20), anomalyStatus: faker.helpers.arrayElement(['ANOMALIA','ANOMALIA_RESTRITIVA'] as const), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, question_id: faker.string.alpha(20), updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`})), undefined]), ...overrideResponse})

export const getAnswersControllerFindListResponseMock = (): Answers[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), textAnswer: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), imageAnswer: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), question_id: faker.string.alpha(20), employee_id: faker.number.int({min: undefined, max: undefined}), anomalyStatus: faker.string.alpha(20)})))

export const getAnswersControllerCreateResponseMock = (overrideResponse: Partial< AnswerResponse > = {}): AnswerResponse => ({id: faker.string.alpha(20), textAnswer: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), imageAnswer: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), question_id: faker.string.alpha(20), employee_id: faker.number.int({min: undefined, max: undefined}), anomalyStatus: faker.string.alpha(20), openIaResponse: faker.string.alpha(20), ...overrideResponse})

export const getAnswersControllerFindByQuestionIdResponseMock = (): Answers[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), textAnswer: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), imageAnswer: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), question_id: faker.string.alpha(20), employee_id: faker.number.int({min: undefined, max: undefined}), anomalyStatus: faker.string.alpha(20)})))

export const getAnswersControllerCreateForImageQuestionResponseMock = (overrideResponse: Partial< AnswerResponse > = {}): AnswerResponse => ({id: faker.string.alpha(20), textAnswer: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), imageAnswer: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), question_id: faker.string.alpha(20), employee_id: faker.number.int({min: undefined, max: undefined}), anomalyStatus: faker.string.alpha(20), openIaResponse: faker.string.alpha(20), ...overrideResponse})

export const getAnswersControllerCreateForMultipleQuestionResponseMock = (overrideResponse: Partial< AnswerChoice > = {}): AnswerChoice => ({id: faker.string.alpha(20), choice_id: faker.string.alpha(20), employee_id: faker.number.int({min: undefined, max: undefined}), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getAnswersControllerFindAnswersWithCheckListResponseMock = (): AnswersWithQuestions[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), question: faker.string.alpha(20), answer: faker.string.alpha(20), question_id: faker.string.alpha(20), companyName: faker.string.alpha(20), employeeName: faker.string.alpha(20), created_at: faker.string.alpha(20), updated_at: faker.string.alpha(20), employee_id: faker.number.int({min: undefined, max: undefined}), anomalyStatus: faker.helpers.arrayElement(['ANOMALIA','ANOMALIA_RESTRITIVA'] as const), hasAnomaly: faker.datatype.boolean(), type: faker.helpers.arrayElement(['Texto','M√∫ltipla escolha','Upload de arquivo'] as const)})))

export const getAnswersControllerCreateAnomalyResolutionResponseMock = (overrideResponse: Partial< AnomalyResolution > = {}): AnomalyResolution => ({id: faker.string.alpha(20), description: {}, imageUrl: {}, status: faker.helpers.arrayElement(['PENDING','RESOLVED','REJECTED'] as const), updated_by: faker.number.int({min: undefined, max: undefined}), answer_id: faker.string.alpha(20), created_at: faker.string.alpha(20), updated_at: faker.string.alpha(20), ...overrideResponse})

export const getAnswersControllerUpdateAnomalyResolutionResponseMock = (overrideResponse: Partial< AnomalyResolution > = {}): AnomalyResolution => ({id: faker.string.alpha(20), description: {}, imageUrl: {}, status: faker.helpers.arrayElement(['PENDING','RESOLVED','REJECTED'] as const), updated_by: faker.number.int({min: undefined, max: undefined}), answer_id: faker.string.alpha(20), created_at: faker.string.alpha(20), updated_at: faker.string.alpha(20), ...overrideResponse})

export const getAnswersControllerFindAnomalyResolutionByIdResponseMock = (overrideResponse: Partial< AnomalyResolution > = {}): AnomalyResolution => ({id: faker.string.alpha(20), description: {}, imageUrl: {}, status: faker.helpers.arrayElement(['PENDING','RESOLVED','REJECTED'] as const), updated_by: faker.number.int({min: undefined, max: undefined}), answer_id: faker.string.alpha(20), created_at: faker.string.alpha(20), updated_at: faker.string.alpha(20), ...overrideResponse})

export const getAnswersControllerFindAnomalyResolutionListResponseMock = (): AnomalyResolution[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), description: {}, imageUrl: {}, status: faker.helpers.arrayElement(['PENDING','RESOLVED','REJECTED'] as const), updated_by: faker.number.int({min: undefined, max: undefined}), answer_id: faker.string.alpha(20), created_at: faker.string.alpha(20), updated_at: faker.string.alpha(20)})))


export const getAppControllerGetHelloMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAuthControllerLoginDashboardMockHandler = (overrideResponse?: ResponseAuthDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ResponseAuthDto> | ResponseAuthDto)) => {
  return http.post('*/auth/loginDashboard', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthControllerLoginDashboardResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAuthControllerLoginMobileMockHandler = (overrideResponse?: ResponseAuthDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ResponseAuthDto> | ResponseAuthDto)) => {
  return http.post('*/auth/loginMobile', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthControllerLoginMobileResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAuthControllerRefreshTokenMockHandler = (overrideResponse?: ResponseAuthDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ResponseAuthDto> | ResponseAuthDto)) => {
  return http.post('*/auth/refreshToken', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthControllerRefreshTokenResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAuthControllerGetUserAuthMockHandler = (overrideResponse?: UserAuth | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserAuth> | UserAuth)) => {
  return http.get('*/auth/userAuth', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthControllerGetUserAuthResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesControllerFindSettingsMockHandler = (overrideResponse?: FindCompanySettings[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<FindCompanySettings[]> | FindCompanySettings[])) => {
  return http.get('*/companies/settings', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompaniesControllerFindSettingsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesControllerUpdateCompanySettingsMockHandler = (overrideResponse?: CompanyResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CompanyResponse> | CompanyResponse)) => {
  return http.post('*/companies/settings', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompaniesControllerUpdateCompanySettingsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesControllerFindAllMockHandler = (overrideResponse?: Company[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Company[]> | Company[])) => {
  return http.get('*/companies', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompaniesControllerFindAllResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesControllerCreateMockHandler = (overrideResponse?: CompanyResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CompanyResponse> | CompanyResponse)) => {
  return http.post('*/companies', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompaniesControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesControllerUpdateMockHandler = (overrideResponse?: CompanyResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<CompanyResponse> | CompanyResponse)) => {
  return http.put('*/companies', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompaniesControllerUpdateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesControllerFindOneMockHandler = (overrideResponse?: Company | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Company> | Company)) => {
  return http.get('*/companies/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompaniesControllerFindOneResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesControllerRemoveMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/companies/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getEmployeesControllerCreateMockHandler = (overrideResponse?: CreateEmployeeResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateEmployeeResponse> | CreateEmployeeResponse)) => {
  return http.post('*/employees', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEmployeesControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEmployeesControllerFindListMockHandler = (overrideResponse?: EmployeeListDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<EmployeeListDto[]> | EmployeeListDto[])) => {
  return http.get('*/employees', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEmployeesControllerFindListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEmployeesControllerUpdateMockHandler = (overrideResponse?: Employee | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Employee> | Employee)) => {
  return http.put('*/employees', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEmployeesControllerUpdateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getChecklistsControllerCreateMockHandler = (overrideResponse?: CheckList | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CheckList> | CheckList)) => {
  return http.post('*/checklists', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getChecklistsControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getChecklistsControllerFindPaginatedByParamsMockHandler = (overrideResponse?: CheckListItemFormattedList[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CheckListItemFormattedList[]> | CheckListItemFormattedList[])) => {
  return http.get('*/checklists', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getChecklistsControllerFindPaginatedByParamsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getChecklistsControllerFindPaginatedByEmployeeParamsMockHandler = (overrideResponse?: CheckListForSpecificEmployee[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CheckListForSpecificEmployee[]> | CheckListForSpecificEmployee[])) => {
  return http.get('*/checklists/by-employee', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getChecklistsControllerFindPaginatedByEmployeeParamsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getChecklistsControllerUpdateCompanyIdMockHandler = (overrideResponse?: CheckListItem | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<CheckListItem> | CheckListItem)) => {
  return http.put('*/checklists/update-company-related', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getChecklistsControllerUpdateCompanyIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getChecklistsControllerUpdateExpiriesTimeMockHandler = (overrideResponse?: CheckList | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<CheckList> | CheckList)) => {
  return http.put('*/checklists/update-expiries-time', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getChecklistsControllerUpdateExpiriesTimeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getRolesControllerFindListMockHandler = (overrideResponse?: Roles[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Roles[]> | Roles[])) => {
  return http.get('*/roles', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRolesControllerFindListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCategoriesControllerFindListMockHandler = (overrideResponse?: Categories[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Categories[]> | Categories[])) => {
  return http.get('*/categories', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCategoriesControllerFindListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCategoriesControllerCreateMockHandler = (overrideResponse?: Categories | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Categories> | Categories)) => {
  return http.post('*/categories', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCategoriesControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getQuestionsControllerFindListMockHandler = (overrideResponse?: QuestionsWithChoices | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<QuestionsWithChoices> | QuestionsWithChoices)) => {
  return http.get('*/questions', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getQuestionsControllerFindListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getQuestionsControllerCreateQuestionMockHandler = (overrideResponse?: Question | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Question> | Question)) => {
  return http.post('*/questions', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getQuestionsControllerCreateQuestionResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getQuestionsControllerUpdateQuestionMockHandler = (overrideResponse?: Question | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Question> | Question)) => {
  return http.put('*/questions', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getQuestionsControllerUpdateQuestionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getQuestionsControllerDeleteQuestionMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/questions', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getQuestionsControllerFindAllMockHandler = (overrideResponse?: QuestionsWithChoices | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<QuestionsWithChoices> | QuestionsWithChoices)) => {
  return http.get('*/questions/findAll', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getQuestionsControllerFindAllResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAnswersControllerFindListMockHandler = (overrideResponse?: Answers[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Answers[]> | Answers[])) => {
  return http.get('*/answers', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAnswersControllerFindListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAnswersControllerCreateMockHandler = (overrideResponse?: AnswerResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AnswerResponse> | AnswerResponse)) => {
  return http.post('*/answers', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAnswersControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAnswersControllerFindByQuestionIdMockHandler = (overrideResponse?: Answers[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Answers[]> | Answers[])) => {
  return http.get('*/answers/answers-question', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAnswersControllerFindByQuestionIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAnswersControllerCreateForImageQuestionMockHandler = (overrideResponse?: AnswerResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AnswerResponse> | AnswerResponse)) => {
  return http.post('*/answers/answers-image-question', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAnswersControllerCreateForImageQuestionResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAnswersControllerCreateForMultipleQuestionMockHandler = (overrideResponse?: AnswerChoice | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AnswerChoice> | AnswerChoice)) => {
  return http.post('*/answers/answers-multiple-choice-question', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAnswersControllerCreateForMultipleQuestionResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAnswersControllerFindAnswersWithCheckListMockHandler = (overrideResponse?: AnswersWithQuestions[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<AnswersWithQuestions[]> | AnswersWithQuestions[])) => {
  return http.get('*/answers/answers-checklist', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAnswersControllerFindAnswersWithCheckListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAnswersControllerCreateAnomalyResolutionMockHandler = (overrideResponse?: AnomalyResolution | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AnomalyResolution> | AnomalyResolution)) => {
  return http.post('*/answers/answers-anomaly-resolution', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAnswersControllerCreateAnomalyResolutionResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAnswersControllerUpdateAnomalyResolutionMockHandler = (overrideResponse?: AnomalyResolution | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<AnomalyResolution> | AnomalyResolution)) => {
  return http.put('*/answers/answers-anomaly-resolution-update', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAnswersControllerUpdateAnomalyResolutionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAnswersControllerFindAnomalyResolutionByIdMockHandler = (overrideResponse?: AnomalyResolution | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<AnomalyResolution> | AnomalyResolution)) => {
  return http.get('*/answers/answers-anomaly-resolution-answer-id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAnswersControllerFindAnomalyResolutionByIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAnswersControllerFindAnomalyResolutionListMockHandler = (overrideResponse?: AnomalyResolution[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<AnomalyResolution[]> | AnomalyResolution[])) => {
  return http.get('*/answers/answers-anomaly-resolution-get', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAnswersControllerFindAnomalyResolutionListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getIndicadorOnlineAPIMock = () => [
  getAppControllerGetHelloMockHandler(),
  getAuthControllerLoginDashboardMockHandler(),
  getAuthControllerLoginMobileMockHandler(),
  getAuthControllerRefreshTokenMockHandler(),
  getAuthControllerGetUserAuthMockHandler(),
  getCompaniesControllerFindSettingsMockHandler(),
  getCompaniesControllerUpdateCompanySettingsMockHandler(),
  getCompaniesControllerFindAllMockHandler(),
  getCompaniesControllerCreateMockHandler(),
  getCompaniesControllerUpdateMockHandler(),
  getCompaniesControllerFindOneMockHandler(),
  getCompaniesControllerRemoveMockHandler(),
  getEmployeesControllerCreateMockHandler(),
  getEmployeesControllerFindListMockHandler(),
  getEmployeesControllerUpdateMockHandler(),
  getChecklistsControllerCreateMockHandler(),
  getChecklistsControllerFindPaginatedByParamsMockHandler(),
  getChecklistsControllerFindPaginatedByEmployeeParamsMockHandler(),
  getChecklistsControllerUpdateCompanyIdMockHandler(),
  getChecklistsControllerUpdateExpiriesTimeMockHandler(),
  getRolesControllerFindListMockHandler(),
  getCategoriesControllerFindListMockHandler(),
  getCategoriesControllerCreateMockHandler(),
  getQuestionsControllerFindListMockHandler(),
  getQuestionsControllerCreateQuestionMockHandler(),
  getQuestionsControllerUpdateQuestionMockHandler(),
  getQuestionsControllerDeleteQuestionMockHandler(),
  getQuestionsControllerFindAllMockHandler(),
  getAnswersControllerFindListMockHandler(),
  getAnswersControllerCreateMockHandler(),
  getAnswersControllerFindByQuestionIdMockHandler(),
  getAnswersControllerCreateForImageQuestionMockHandler(),
  getAnswersControllerCreateForMultipleQuestionMockHandler(),
  getAnswersControllerFindAnswersWithCheckListMockHandler(),
  getAnswersControllerCreateAnomalyResolutionMockHandler(),
  getAnswersControllerUpdateAnomalyResolutionMockHandler(),
  getAnswersControllerFindAnomalyResolutionByIdMockHandler(),
  getAnswersControllerFindAnomalyResolutionListMockHandler()]
