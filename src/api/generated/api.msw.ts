/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Indicador Online API
 * Documenta√ß√£o da API usando Swagger
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  Checklist,
  Company,
  ResponseAuthDto,
  User
} from './api.schemas';


export const getAuthControllerLoginResponseMock = (overrideResponse: Partial< ResponseAuthDto > = {}): ResponseAuthDto => ({accessToken: faker.string.alpha(20), ...overrideResponse})

export const getUsersControllerCreateResponseMock = (overrideResponse: Partial< User > = {}): User => ({id: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), name: faker.string.alpha(20), role: faker.string.alpha(20), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getUsersControllerGetAllUsersResponseMock = (): User[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), name: faker.string.alpha(20), role: faker.string.alpha(20), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getUsersControllerGetByEmailResponseMock = (overrideResponse: Partial< User > = {}): User => ({id: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), name: faker.string.alpha(20), role: faker.string.alpha(20), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getCompaniesControllerFindAllResponseMock = (): Company[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), cnpj: faker.string.alpha(20), isActive: faker.datatype.boolean(), checklistIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getCompaniesControllerCreateResponseMock = (overrideResponse: Partial< Company > = {}): Company => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), cnpj: faker.string.alpha(20), isActive: faker.datatype.boolean(), checklistIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getCompaniesControllerFindOneResponseMock = (overrideResponse: Partial< Company > = {}): Company => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), cnpj: faker.string.alpha(20), isActive: faker.datatype.boolean(), checklistIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getCompaniesControllerUpdateResponseMock = (overrideResponse: Partial< Company > = {}): Company => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), cnpj: faker.string.alpha(20), isActive: faker.datatype.boolean(), checklistIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getChecklistsControllerCreateResponseMock = (overrideResponse: Partial< Checklist > = {}): Checklist => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), categories: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({categoryName: faker.string.alpha(20), questions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({questionText: faker.string.alpha(20), questionType: faker.helpers.arrayElement(['multiple-choice','text','boolean'] as const), options: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), isRequired: faker.datatype.boolean(), position: faker.number.int({min: undefined, max: undefined})}))})), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getChecklistsControllerFindAllResponseMock = (): Checklist[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), categories: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({categoryName: faker.string.alpha(20), questions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({questionText: faker.string.alpha(20), questionType: faker.helpers.arrayElement(['multiple-choice','text','boolean'] as const), options: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), isRequired: faker.datatype.boolean(), position: faker.number.int({min: undefined, max: undefined})}))})), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getChecklistsControllerFindOneResponseMock = (): Checklist[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), categories: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({categoryName: faker.string.alpha(20), questions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({questionText: faker.string.alpha(20), questionType: faker.helpers.arrayElement(['multiple-choice','text','boolean'] as const), options: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), isRequired: faker.datatype.boolean(), position: faker.number.int({min: undefined, max: undefined})}))})), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getChecklistsControllerUpdateResponseMock = (overrideResponse: Partial< Checklist > = {}): Checklist => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), categories: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({categoryName: faker.string.alpha(20), questions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({questionText: faker.string.alpha(20), questionType: faker.helpers.arrayElement(['multiple-choice','text','boolean'] as const), options: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), isRequired: faker.datatype.boolean(), position: faker.number.int({min: undefined, max: undefined})}))})), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})


export const getAppControllerGetHelloMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAuthControllerLoginMockHandler = (overrideResponse?: ResponseAuthDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ResponseAuthDto> | ResponseAuthDto)) => {
  return http.post('*/auth/login', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthControllerLoginResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersControllerCreateMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<User> | User)) => {
  return http.post('*/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUsersControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersControllerGetAllUsersMockHandler = (overrideResponse?: User[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User[]> | User[])) => {
  return http.get('*/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUsersControllerGetAllUsersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersControllerGetByEmailMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User> | User)) => {
  return http.get('*/users/:email', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUsersControllerGetByEmailResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesControllerFindAllMockHandler = (overrideResponse?: Company[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Company[]> | Company[])) => {
  return http.get('*/companies', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompaniesControllerFindAllResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesControllerCreateMockHandler = (overrideResponse?: Company | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Company> | Company)) => {
  return http.post('*/companies', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompaniesControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesControllerFindOneMockHandler = (overrideResponse?: Company | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Company> | Company)) => {
  return http.get('*/companies/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompaniesControllerFindOneResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesControllerUpdateMockHandler = (overrideResponse?: Company | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Company> | Company)) => {
  return http.put('*/companies/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompaniesControllerUpdateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesControllerRemoveMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/companies/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getEmployeesControllerFindAllMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/employees', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getEmployeesControllerCreateMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/employees', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getEmployeesControllerFindOneMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/employees/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getEmployeesControllerUpdateMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/employees/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getEmployeesControllerRemoveMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/employees/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getChecklistsControllerCreateMockHandler = (overrideResponse?: Checklist | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Checklist> | Checklist)) => {
  return http.post('*/checklists', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getChecklistsControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getChecklistsControllerFindAllMockHandler = (overrideResponse?: Checklist[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Checklist[]> | Checklist[])) => {
  return http.get('*/checklists', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getChecklistsControllerFindAllResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getChecklistsControllerFindOneMockHandler = (overrideResponse?: Checklist[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Checklist[]> | Checklist[])) => {
  return http.get('*/checklists/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getChecklistsControllerFindOneResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getChecklistsControllerUpdateMockHandler = (overrideResponse?: Checklist | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Checklist> | Checklist)) => {
  return http.put('*/checklists/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getChecklistsControllerUpdateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getChecklistsControllerRemoveMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/checklists/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}
export const getIndicadorOnlineAPIMock = () => [
  getAppControllerGetHelloMockHandler(),
  getAuthControllerLoginMockHandler(),
  getUsersControllerCreateMockHandler(),
  getUsersControllerGetAllUsersMockHandler(),
  getUsersControllerGetByEmailMockHandler(),
  getCompaniesControllerFindAllMockHandler(),
  getCompaniesControllerCreateMockHandler(),
  getCompaniesControllerFindOneMockHandler(),
  getCompaniesControllerUpdateMockHandler(),
  getCompaniesControllerRemoveMockHandler(),
  getEmployeesControllerFindAllMockHandler(),
  getEmployeesControllerCreateMockHandler(),
  getEmployeesControllerFindOneMockHandler(),
  getEmployeesControllerUpdateMockHandler(),
  getEmployeesControllerRemoveMockHandler(),
  getChecklistsControllerCreateMockHandler(),
  getChecklistsControllerFindAllMockHandler(),
  getChecklistsControllerFindOneMockHandler(),
  getChecklistsControllerUpdateMockHandler(),
  getChecklistsControllerRemoveMockHandler()]
