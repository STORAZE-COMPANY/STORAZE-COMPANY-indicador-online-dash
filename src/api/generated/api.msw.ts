/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Indicador Online API
 * Documenta√ß√£o da API usando Swagger
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  Categories,
  CheckList,
  Checklist,
  Company,
  CreateEmployeeResponse,
  Employee,
  ResponseAuthDto,
  Roles,
  User,
  UserAuth
} from './api.schemas';


export const getAuthControllerLoginDashboardResponseMock = (overrideResponse: Partial< ResponseAuthDto > = {}): ResponseAuthDto => ({access_token: faker.string.alpha(20), refresh_token: faker.string.alpha(20), user: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.string.alpha(20)},}, ...overrideResponse})

export const getAuthControllerLoginMobileResponseMock = (overrideResponse: Partial< ResponseAuthDto > = {}): ResponseAuthDto => ({access_token: faker.string.alpha(20), refresh_token: faker.string.alpha(20), user: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.string.alpha(20)},}, ...overrideResponse})

export const getAuthControllerRefreshTokenResponseMock = (overrideResponse: Partial< ResponseAuthDto > = {}): ResponseAuthDto => ({access_token: faker.string.alpha(20), refresh_token: faker.string.alpha(20), user: {...{id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.string.alpha(20)},}, ...overrideResponse})

export const getAuthControllerGetUserAuthResponseMock = (overrideResponse: Partial< UserAuth > = {}): UserAuth => ({id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.string.alpha(20), ...overrideResponse})

export const getUsersControllerCreateResponseMock = (overrideResponse: Partial< User > = {}): User => ({id: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), name: faker.string.alpha(20), role: faker.string.alpha(20), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getUsersControllerGetAllUsersResponseMock = (): User[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), name: faker.string.alpha(20), role: faker.string.alpha(20), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getUsersControllerGetByEmailResponseMock = (overrideResponse: Partial< User > = {}): User => ({id: faker.string.alpha(20), email: faker.string.alpha(20), password: faker.string.alpha(20), name: faker.string.alpha(20), role: faker.string.alpha(20), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getCompaniesControllerFindAllResponseMock = (): Company[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), email: faker.string.alpha(20), cnpj: faker.string.alpha(20), isActive: faker.datatype.boolean(), checklistIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), role_id: faker.string.alpha(20), password: faker.string.alpha(20)})))

export const getCompaniesControllerCreateResponseMock = (overrideResponse: Partial< Company > = {}): Company => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), email: faker.string.alpha(20), cnpj: faker.string.alpha(20), isActive: faker.datatype.boolean(), checklistIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), role_id: faker.string.alpha(20), password: faker.string.alpha(20), ...overrideResponse})

export const getCompaniesControllerFindOneResponseMock = (overrideResponse: Partial< Company > = {}): Company => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), email: faker.string.alpha(20), cnpj: faker.string.alpha(20), isActive: faker.datatype.boolean(), checklistIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), role_id: faker.string.alpha(20), password: faker.string.alpha(20), ...overrideResponse})

export const getCompaniesControllerUpdateResponseMock = (overrideResponse: Partial< Company > = {}): Company => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), email: faker.string.alpha(20), cnpj: faker.string.alpha(20), isActive: faker.datatype.boolean(), checklistIds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), role_id: faker.string.alpha(20), password: faker.string.alpha(20), ...overrideResponse})

export const getEmployeesControllerCreateResponseMock = (overrideResponse: Partial< CreateEmployeeResponse > = {}): CreateEmployeeResponse => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), email: faker.string.alpha(20), company_id: faker.number.int({min: undefined, max: undefined}), phone: faker.string.alpha(20), ...overrideResponse})

export const getEmployeesControllerFindListResponseMock = (overrideResponse: Partial< Employee > = {}): Employee => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), email: faker.string.alpha(20), phone: faker.string.alpha(20), company_id: faker.number.int({min: undefined, max: undefined}), password: faker.string.alpha(20), role_id: faker.string.alpha(20), ...overrideResponse})

export const getChecklistsControllerCreateResponseMock = (overrideResponse: Partial< CheckList > = {}): CheckList => ({id: faker.string.alpha(20), name: faker.string.alpha(20), expiries_in: `${faker.date.past().toISOString().split('.')[0]}Z`, created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getChecklistsControllerFindAllResponseMock = (): Checklist[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), categories: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({categoryName: faker.string.alpha(20), questions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({questionText: faker.string.alpha(20), questionType: faker.helpers.arrayElement(['multiple-choice','text','boolean'] as const), options: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), isRequired: faker.datatype.boolean(), position: faker.number.int({min: undefined, max: undefined})}))})), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getChecklistsControllerFindOneResponseMock = (): Checklist[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), categories: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({categoryName: faker.string.alpha(20), questions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({questionText: faker.string.alpha(20), questionType: faker.helpers.arrayElement(['multiple-choice','text','boolean'] as const), options: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), isRequired: faker.datatype.boolean(), position: faker.number.int({min: undefined, max: undefined})}))})), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getChecklistsControllerUpdateResponseMock = (overrideResponse: Partial< Checklist > = {}): Checklist => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), categories: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({categoryName: faker.string.alpha(20), questions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({questionText: faker.string.alpha(20), questionType: faker.helpers.arrayElement(['multiple-choice','text','boolean'] as const), options: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), isRequired: faker.datatype.boolean(), position: faker.number.int({min: undefined, max: undefined})}))})), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getRolesControllerFindListResponseMock = (): Roles[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), name: faker.string.alpha(20), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getCategoriesControllerFindListResponseMock = (): Categories[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), name: faker.string.alpha(20), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getCategoriesControllerCreateResponseMock = (overrideResponse: Partial< Categories > = {}): Categories => ({id: faker.string.alpha(20), name: faker.string.alpha(20), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})


export const getAppControllerGetHelloMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAuthControllerLoginDashboardMockHandler = (overrideResponse?: ResponseAuthDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ResponseAuthDto> | ResponseAuthDto)) => {
  return http.post('*/auth/loginDashboard', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthControllerLoginDashboardResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAuthControllerLoginMobileMockHandler = (overrideResponse?: ResponseAuthDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ResponseAuthDto> | ResponseAuthDto)) => {
  return http.post('*/auth/loginMobile', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthControllerLoginMobileResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAuthControllerRefreshTokenMockHandler = (overrideResponse?: ResponseAuthDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ResponseAuthDto> | ResponseAuthDto)) => {
  return http.post('*/auth/refreshToken', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthControllerRefreshTokenResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAuthControllerGetUserAuthMockHandler = (overrideResponse?: UserAuth | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserAuth> | UserAuth)) => {
  return http.get('*/auth/userAuth', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthControllerGetUserAuthResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersControllerCreateMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<User> | User)) => {
  return http.post('*/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUsersControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersControllerGetAllUsersMockHandler = (overrideResponse?: User[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User[]> | User[])) => {
  return http.get('*/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUsersControllerGetAllUsersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersControllerGetByEmailMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User> | User)) => {
  return http.get('*/users/:email', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUsersControllerGetByEmailResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesControllerFindAllMockHandler = (overrideResponse?: Company[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Company[]> | Company[])) => {
  return http.get('*/companies', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompaniesControllerFindAllResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesControllerCreateMockHandler = (overrideResponse?: Company | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Company> | Company)) => {
  return http.post('*/companies', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompaniesControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesControllerFindOneMockHandler = (overrideResponse?: Company | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Company> | Company)) => {
  return http.get('*/companies/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompaniesControllerFindOneResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesControllerUpdateMockHandler = (overrideResponse?: Company | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Company> | Company)) => {
  return http.put('*/companies/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompaniesControllerUpdateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesControllerRemoveMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/companies/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getEmployeesControllerCreateMockHandler = (overrideResponse?: CreateEmployeeResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateEmployeeResponse> | CreateEmployeeResponse)) => {
  return http.post('*/employees', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEmployeesControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEmployeesControllerFindListMockHandler = (overrideResponse?: Employee | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Employee> | Employee)) => {
  return http.get('*/employees', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEmployeesControllerFindListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getChecklistsControllerCreateMockHandler = (overrideResponse?: CheckList | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CheckList> | CheckList)) => {
  return http.post('*/checklists', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getChecklistsControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getChecklistsControllerFindAllMockHandler = (overrideResponse?: Checklist[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Checklist[]> | Checklist[])) => {
  return http.get('*/checklists', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getChecklistsControllerFindAllResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getChecklistsControllerFindOneMockHandler = (overrideResponse?: Checklist[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Checklist[]> | Checklist[])) => {
  return http.get('*/checklists/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getChecklistsControllerFindOneResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getChecklistsControllerUpdateMockHandler = (overrideResponse?: Checklist | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Checklist> | Checklist)) => {
  return http.put('*/checklists/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getChecklistsControllerUpdateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getChecklistsControllerRemoveMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/checklists/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getRolesControllerFindListMockHandler = (overrideResponse?: Roles[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Roles[]> | Roles[])) => {
  return http.get('*/roles', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRolesControllerFindListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCategoriesControllerFindListMockHandler = (overrideResponse?: Categories[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Categories[]> | Categories[])) => {
  return http.get('*/categories', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCategoriesControllerFindListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCategoriesControllerCreateMockHandler = (overrideResponse?: Categories | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Categories> | Categories)) => {
  return http.post('*/categories', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCategoriesControllerCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getIndicadorOnlineAPIMock = () => [
  getAppControllerGetHelloMockHandler(),
  getAuthControllerLoginDashboardMockHandler(),
  getAuthControllerLoginMobileMockHandler(),
  getAuthControllerRefreshTokenMockHandler(),
  getAuthControllerGetUserAuthMockHandler(),
  getUsersControllerCreateMockHandler(),
  getUsersControllerGetAllUsersMockHandler(),
  getUsersControllerGetByEmailMockHandler(),
  getCompaniesControllerFindAllMockHandler(),
  getCompaniesControllerCreateMockHandler(),
  getCompaniesControllerFindOneMockHandler(),
  getCompaniesControllerUpdateMockHandler(),
  getCompaniesControllerRemoveMockHandler(),
  getEmployeesControllerCreateMockHandler(),
  getEmployeesControllerFindListMockHandler(),
  getChecklistsControllerCreateMockHandler(),
  getChecklistsControllerFindAllMockHandler(),
  getChecklistsControllerFindOneMockHandler(),
  getChecklistsControllerUpdateMockHandler(),
  getChecklistsControllerRemoveMockHandler(),
  getRolesControllerFindListMockHandler(),
  getCategoriesControllerFindListMockHandler(),
  getCategoriesControllerCreateMockHandler()]
